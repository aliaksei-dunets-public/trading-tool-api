@startuml Class

' 1. During creation of the session check/schedule a job based on interval
' 2. The application job read active ssesions and procced the next steps for every session:
' 2.1. Read orders from the database
' 2.2. Read orders from exchange API
' 2.3. Get signals based on session config
' 2.4. Make a desicion regarding existing position/create a new position
' 2.4.1. Call API for open/close a position
' 2.4.2. Call DB
' 2.4.2.1. Add transaction
' 2.4.2.2. Update/Create the position
' 2.4.2.3. Update Balance

' The main class for trading - the first endpoint
class Robot {
    +run()
}

class SessionManager {
    #_session_mdl: SessionModel
    #_trader_mng: TraderBase

    +run()
}

class TransactionManager

class BalanceManager

class TraderBase {
    +session_mdl: SessionModel
    +balance_mng: BalanceManager
    +tranaction_mng: TransactionManager
    #data_mng: DataManagerBase

    +{static} get_manager(SessionModel)
    +run()
    #_process_signal(SignalModel)
    #_decide_to_open_position(SignalModel)
    #_decide_to_close_position(SignalModel)
    #_is_open_position()
}

TraderBase --o BalanceManager
TraderBase --o TransactionManager


class TraderManager extends TraderBase {
    #api_mng: ApiManager
}

TraderManager --o ApiManager

class SimulatorManager extends TraderBase {
    #data_mng: DataBaseManager
}

SimulatorManager --o DatabaseManager

class HistorySimulatorManager extends TraderBase {
    #data_mng: LocalDataManager
}

HistorySimulatorManager --o LocalDataManager

class DataManagerBase {
    #_session_mdl: SessionModel
    #_side_mng: SideManager
    #_open_positions: dict
    #_current_position: OrderModel

    +init_positions()
    +is_required_to_open_position(SignalModel)
    +is_required_to_close_position(SignalModel)
    +open_position(SignalModel)
    +close_position(SignalModel)
    +get_current_position()
    +get_positions()
    +get_open_positions()
    +has_open_position()
    +synchronize(DataManagerBase)
    #_set_current_postion(OrderModel)
    #_set_side_mng(SignalType)
    #_get_open_position_template(SignalModel)
    #_get_quantity()
    #_get_fee()
}

DataManagerBase --o SideManagerBase

class ApiManager extends DataManagerBase {
    #_exchange_handler: ExchangeHandler

    +{static} get_manager(SessionModel)
    +open_position(SignalModel)
    +close_position(SignalModel)
    +get_positions()
    +synchronize(DataManagerBase)
}

class DatabaseManager extends DataManagerBase {
    +{static} get_manager(SessionModel)
    +open_position(SignalModel)
    +close_position(SignalModel)
    +get_positions()
    +synchronize(DataManagerBase)
    +open_position_based_api(DataManagerBase)
    +close_position_based_api(DataManagerBase)
}

class LocalDataManager extends DataManagerBase {
}

class OrderManagerBase extends DataManagerBase
class LeverageManagerBase extends DataManagerBase

class OrderApiManager extends OrderManagerBase
class LeverageApiManager extends LeverageManagerBase

class OrderDatabaseManager extends OrderManagerBase {
    +open_position(SignalModel)
    +close_position(SignalModel)
    +get_positions()
}

class LeverageDatabaseManager extends LeverageManagerBase {
    +open_position(SignalModel)
    +close_position(SignalModel)
    +get_positions()
    #_get_open_position_template(SignalModel)
}

class SideManagerBase {
    +{static} get_manager_by_type(SessionModel, OrderSideType)
    +{static} get_manager_by_signal(SessionModel, SignalType)
    +is_required_to_close_position(OrderModel, SignalModel)
    +get_close_details(OrderModel, SignalModel)
    +get_side_type()
    +get_stop_loss()
    +get_take_profit()
}

class SellManager extends SideManagerBase {
    +get_close_details(OrderModel, SignalModel)
    +get_side_type()
    +get_stop_loss()
    +get_take_profit()
}

class BuyManager extends SideManagerBase {
    +get_close_details(OrderModel, SignalModel)
    +get_side_type()
    +get_stop_loss()
    +get_take_profit()
}

Robot --> SessionManager
SessionManager --> TraderBase

@enduml
